import { expect } from '@wdio/globals';
import InventoryPage from '../pageObject/InventoryPage';
import LoginPage from '../pageObject/LoginPage';
import CartPage from '../pageObject/CartPage';
import LogOutPage from '../pageObject/LogOutPage';
import CheckoutPage from '../pageObject/CheckoutPage';

describe('Verify default sort order', () => {
    it(' Verify items in cart are retained in cart after logout', async () => {
        await LoginPage.open();
        await LoginPage.login('performance_glitch_user', 'secret_sauce');
        await browser.maximizeWindow(); // Maximize the browser window
        const SelectedItems=await InventoryPage.addItemToCart();
        await LogOutPage.logout();
        await LoginPage.login('performance_glitch_user', 'secret_sauce');
        const ItemInCart=await CartPage.ShoppingCart();
        expect(SelectedItems).toEqual(ItemInCart);
        

    });

    it('Verify user can place order.', async () => {
        await LoginPage.open();
        await LoginPage.login('performance_glitch_user', 'secret_sauce');
        await browser.maximizeWindow(); // Maximize the browser window
        await CartPage.addHighestLowestValue();
        await CartPage.ShoppingCart();
        await CheckoutPage.VerifyErrorMessage();
        await CheckoutPage.VerifyTotalPrice();
        const actualConfirmationText = await CheckoutPage.OrderConfirmationPage();
        const expectedConfirmationText='Thank you for your order!';
        expect(actualConfirmationText).toEqual(expectedConfirmationText);
        await CheckoutPage.backToHomePage();
        let pageURL = await browser.getUrl();
        expect(pageURL).toBe('https://www.saucedemo.com/inventory.html');

    });
});